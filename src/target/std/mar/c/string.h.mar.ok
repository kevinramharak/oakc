#[header("implementation of the C standard library file '<string.h>'")]

#[if(!is_defined("NULL")) {
    const NULL = 0;
}]

#[if(!is_defined("C_STRING_GUARD")) {
    // include guard
    const C_STRING_GUARD = 1;

    // include dependencies
    #[include("../ffi/ffi.mar.ok")]

    // include asm implementation
    #[extern("string.h.mar")]

    // define ffi
    #[doc("Finds the first occurence of `needle` in `haystack` up till `length` amount of words. Returns a pointer to the found `needle` location or `NULL` if not found.")]
    fn C::memchr(haystack: &void, needle: char, length: num) -> &void {
        __ffi_pass_arg_by_value!(length);
        __ffi_pass_arg_by_value!(needle);
        __ffi_pass_arg_by_reference!(haystack);
        __c_memchr!();
        return __ffi_pass_return_value_as_reference!() as &void;
    }

    #[doc("Compares the first `length` amount of words of the block of memory pointed to by `lhs` to the bytes pointed by `rhs`, returning zero if they all match, above zero if `lhs` is bigger, below zero if `rhs` is bigger")]
    fn C::memcmp(lhs: &void, rhs: &void, length: num) -> num {
        __ffi_pass_arg_by_value!(length);
        __ffi_pass_arg_by_reference!(rhs);
        __ffi_pass_arg_by_reference!(lhs);
        __c_memcmp!();
        return __ffi_pass_return_value_as_value!() as num;
    }

    #[doc("Copies `length` amount of words from the location pointed to by `source` to the memory location pointed to by `destination`.")]
    fn C::memcpy(destination: &void, source: &void, length: num) -> &void {
            __ffi_pass_arg_by_value!(length);
            __ffi_pass_arg_by_reference!(source);
            __ffi_pass_arg_by_reference!(destination);
            __c_memcpy!();
            return __ffi_pass_return_value_as_reference!() as &void;
    }

    #[doc("Copies `length` amount of words from the location pointed by `source` to the location pointed to by `destination`. Copying takes place as if an intermediate buffer were used, allowing the `destination` and `source` to overlap.")]
    fn C::memmove(destination: &void, source: &void, length: num) -> &void {
        __ffi_pass_arg_by_value!(length);
        __ffi_pass_arg_by_reference!(source);
        __ffi_pass_arg_by_reference!(destination);
        __c_memmove!();
        return __ffi_pass_return_value_as_reference!() as &void;
    }

    #[doc("Sets `length` amount of words at location `destination` to the value of `value`.")]
    fn C::memset(destination: &void, value: num, length: num) -> &void {
        __ffi_pass_arg_by_value!(length);
        __ffi_pass_arg_by_value!(value);
        __ffi_pass_arg_by_reference!(destination);
        __c_memset!();
        return __ffi_pass_return_value_as_reference!() as &void;
    }

    #[doc("Concats `source` at the end of `destination`.")]
    fn C::strcat(destination: &char, source: &char) -> &char {
        __ffi_pass_arg_by_reference!(source);
        __ffi_pass_arg_by_reference!(destination);
        __c_strcat!();
        return __ffi_pass_return_value_as_reference!() as &char;
    }

    #[doc("Finds the first occurence of `needle` in `haystack`. Returns a pointer to the found `needle` location or `NULL` if not found.")]
    fn C::strchr(haystack: &char, needle: char) -> &char {
        __ffi_pass_arg_by_value!(needle);
        __ffi_pass_arg_by_reference!(haystack);
        __c_strchr!();
        return __ffi_pass_return_value_as_reference!() as &char;
    }

    #[doc("Compares `lhs` with `rhs`, returning zero if all characters match, above zero if `lhs` is bigger, below zero if `rhs` is bigger")]
    fn C::strcmp(lhs: &char, rhs: &char) -> num {
        __ffi_pass_arg_by_reference!(rhs);
        __ffi_pass_arg_by_reference!(lhs);
        __c_strcmp!();
        return __ffi_pass_return_value_as_value!() as num;
    }

    fn C::strcpy(destination: &char, source: &char) -> &char {
        __ffi_pass_arg_by_reference!(source);
        __ffi_pass_arg_by_reference!(destination);
        __c_strcpy!();
        return __ffi_pass_return_value_as_reference!() as &char;
    }

    fn C::strcspn() {

    }

    fn C::strerror() {

    }

    #[doc("Returns the length of the C string `string`")]
    fn C::strlen(string: &char) -> num {
        __ffi_pass_arg_by_reference!(string as &void);
        __c_strlen!();
        return __ffi_pass_return_value_as_value!() as num;
    }

    fn C::strncat() {

    }

    fn C::strncmp() {

    }

    fn C::strncpy() {

    }

    fn C::strpbrk() {

    }

    fn C::strrchr() {

    }

    fn C::strspn() {

    }

    fn C::strstr() {

    }

    fn C::strtok() {

    }
}]
