;; constants
;*************************** Hardware IDs
HWID_LEGS     equ 0x1
HWID_LASER    equ 0x2
HWID_LIDAR    equ 0x3
HWID_KEYBOARD equ 0x4
HWID_DRILL    equ 0x5
HWID_INV      equ 0x6
HWID_RNG      equ 0x7
HWID_CLOCK    equ 0x8
HWID_HOLO     equ 0x9
HWID_BATTERY  equ 0xA
HWID_FLOPPY   equ 0xB
HWID_RADIO    equ 0xC
HWID_COMPORT  equ 0xD

;*************************** Drill actions IDs
DRILL_POLL        equ 1
DRILL_GATHER      equ 2
; Drill status
DRILL_STATUS_OK   equ 0
DRILL_STATUS_BUSY equ 1

;*************************** Inventory actions IDs
INV_CLEAR equ 0
INV_POLL  equ 1

;*************************** Laser actions IDs
LASER_WITHDRAW equ 1
LASER_DEPOSIT  equ 2

;*************************** Legs actions IDs
LEGS_SET_DIRECTION          equ 1
LEGS_SET_DIRECTION_AND_WALK equ 2
; Legs directions
LEGS_DIR_NORTH equ 0
LEGS_DIR_EAST  equ 1
LEGS_DIR_SOUTH equ 2
LEGS_DIR_WEST  equ 3

;*************************** LiDAR actions IDs
LIDAR_GET_POS       equ 1
LIDAR_GET_PATH      equ 2
LIDAR_GET_MAP       equ 3
LIDAR_GET_WORLD_POS equ 4

;*************************** Keyboard actions IDs
KEYBOARD_CLEAR     equ 0
KEYBOARD_FETCH_KEY equ 1

;*************************** Hologram Projector actions IDs
HOLO_CLEAR          equ 0
HOLO_DISPLAY_HEX    equ 1
HOLO_DISPLAY_STRING equ 2
HOLO_DISPLAY_DEC    equ 3
HOLO_DISPLAY_COLOR  equ 4

;*************************** Battery actions IDs
BATTERY_POLL             equ 1
BATTERY_GET_MAX_CAPACITY equ 2

;*************************** Random Number Generator actions IDs
RNG_POLL equ 0

;*************************** Clock actions IDs
CLOCK_POLL equ 0

;*************************** Floppy Disk actions IDs
FLOPPY_POLL         equ 1
FLOPPY_READ_SECTOR  equ 2
FLOPPY_WRITE_SECTOR equ 3

;*************************** Radio actions IDs
RADIO_LISTEN equ 1

;*************************** Com Port actions IDs
COMPORT_BUFFER_CLEAR   equ 0
COMPORT_POLL           equ 1
COMPORT_FRONT_PORT_OUT equ 2
COMPORT_SELF_OUT       equ 3
COMPORT_CONSOLE_CLEAR  equ 4

;*************************** Keys IDs
KEY_ESC   equ 0x1b
KEY_SPACE equ 0x20
KEY_ENTER equ 0xd
KEY_0     equ 0x30
KEY_1     equ 0x31
KEY_2     equ 0x32
KEY_3     equ 0x33
KEY_4     equ 0x34
KEY_5     equ 0x35
KEY_6     equ 0x36
KEY_7     equ 0x37
KEY_8     equ 0x38
KEY_9     equ 0x39
KEY_A     equ 0x41
KEY_B     equ 0x42
KEY_C     equ 0x43
KEY_D     equ 0x44
KEY_E     equ 0x45
KEY_F     equ 0x46
KEY_G     equ 0x47
KEY_H     equ 0x48
KEY_I     equ 0x49
KEY_J     equ 0x4a
KEY_K     equ 0x4b
KEY_L     equ 0x4c
KEY_M     equ 0x4d
KEY_N     equ 0x4e
KEY_O     equ 0x4f
KEY_P     equ 0x50
KEY_Q     equ 0x51
KEY_R     equ 0x52
KEY_S     equ 0x53
KEY_T     equ 0x54
KEY_U     equ 0x55
KEY_V     equ 0x56
KEY_W     equ 0x57
KEY_X     equ 0x58
KEY_Y     equ 0x59
KEY_Z     equ 0x5a

;*************************** Items IDs
ITEM_BIOMASS equ 1
ITEM_IRON    equ 3
ITEM_COPPER  equ 4

;; Setting the binary offset to 0 makes sure our .data section starts at binary address 0, default would be 200
ORG 0

;; data segment - for now assumed that .data starts at adress 0x00
_0x0000:
.data
    ;; _sleep variables
    _should_wake:  DW 0x0000
    _BP_cache: DW 0x0000
    _SP_cache: DW 0x0000
_0x0003:
    _comport_self_out_buffer: DW 40 DUP(0x0000)
    _comport_self_out_length: DW 0
_0x002B:
    ;; padding to be able to adress the following 3 labels
    DW 36 DUP(0x1234)

    ;; 3 words reserved for execution cost variables. These are set by the server executing the code
    ;; see https://github.com/simon987/Much-Assembly-Required/blob/master/Server/src/main/java/net/simon987/server/assembly/CPU.java#L194
_0x0050:
    EXECUTION_COST_ADDR: DW 0x0000
    ;; 32 bit signed integer
    EXECUTED_INSTRUCTION_COUNT_HIGHER: DW 0x0000
    EXECUTED_INSTRUCTION_COUNT_LOWER: DW 0x0000

;; execution on a server tick always starts at .text, on a server reset memory will be cleared
_0x0053:
.text
    ;; if flag is set restore from previous sleep call
    CMP [_should_wake], 1
    JZ _wake

    ;; else intialize the vm
    CALL machine_new

    ;; call main
    CALL main
    ;; if returning from main spin with a sleep call
_spin:
    CALL _sleep
    JMP _spin

;; simple debug function to print a value to stdout
_debug:
    MOV [_debug_buffer], A
    MOV A, COMPORT_SELF_OUT
    MOV X, _debug_buffer
_debug_loop:
    HWI HWID_COMPORT
    CALL _sleep
    JMP _debug_loop
_debug_buffer: DW 8 DUP(0x20)

;; sleep and wake implementation
;; allows to control execution start each server tick
;; if sleep isnt used, execution will always start at .text
_sleep:
    ;; check if there is unflushed comport_self_out_buffer contents
    ;; if so then flush before executing the BRK instruction
    CMP [_comport_self_out_length], 0
    JZ _sleep_push_state
    CALL _comport_self_out_flush
_sleep_push_state:
    ;; not sure if registers are preserved between each game tick, so sleep will preserve all state
    PUSHF                   ;; store flags
    PUSH A                  ;; store registers
    PUSH B
    PUSH C
    PUSH D
    PUSH X
    PUSH Y
    MOV [_BP_cache], BP      ;; store stack base pointer and stack pointer
    MOV [_SP_cache], SP
    MOV [_should_wake], 1    ;; set the flag
    BRK                     ;; wait till until next tick
_wake:                      ;; execution will resume here
    MOV [_should_wake], 0    ;; clear the flag
    MOV SP, [_SP_cache]      ;; restore stack base pointer and stack pointer
    MOV BP, [_BP_cache]
    POP Y                   ;; restore registers
    POP X
    POP D
    POP C
    POP B
    POP A
    POPF                    ;; restore flags
    ;; since `CALL sleep` never executed a RET instruction this will restore execution after the most recent executed `CALL sleep` instruction
    RET

;; void panic(int code); // fatal error handler, always exists program
;; TODO: the strings can probably be allocated in the first 50 bytes
STACK_HEAP_COLLISION EQU 1
NO_FREE_MEMORY EQU 2
STACK_UNDERFLOW EQU 3
_panic_default_message: DW "\nERR_UNKNOWN", 0 ;; 13 length
_panic_stack_heap_collision: DW "\nERR_STACK_HEAP_COLLISION", 0 ;; 26 length
_panic_no_free_memory: DW "\nERR_NO_FREE_MEMORY", 0 ;; 22 length
_panic_stack_underflow: DW "\nERR_STACK_UNDERFLOW", 0 ;; 21 length
_panic:
    PUSH BP
    MOV BP, SP
    MOV A, [BP + 2]
    MOV C, _panic_default_message
    ;; stack and heap collision
_panic_case_1:
    CMP A, 1
    JNZ _panic_case_2
    MOV C, _panic_stack_heap_collision
    JMP _panic_end
_panic_case_2:
    CMP A, 2
    JNZ _panic_case_3
    MOV C, _panic_no_free_memory
    JMP _panic_end
_panic_case_3:
    CMP A, 3
    JNZ _panic_end
    MOV C, _panic_stack_underflow
_panic_end:
    PUSH C
    CALL _comport_self_out_write
_panic_spin:
    CALL _sleep
    JMP _panic_spin

;; void _comport_self_out_flush()
;; flush comport buffer to the hardware
;; called before _sleep executes a BRK instruction
_comport_self_out_flush:
    PUSH A
    PUSH B
    PUSH X
    PUSH BP
    MOV BP, SP
    ;; setup comport hardware interupt parameters
    MOV A, COMPORT_SELF_OUT
    MOV X, _comport_self_out_buffer   ; const char * str = _comport_self_out_buffer
_comport_self_out_flush_loop:
    ;; NOTE: since the length is stored right after the buffer we can use its pointer to check if we are past the buffer contents
    CMP X, _comport_self_out_length   ; while (str != _comport_self_out_length)
    JZ _comport_self_out_flush_return
    HWI HWID_COMPORT                  ;     hwi(HWID_COMPORT, COMPORT_SELF_OUT, str)
    MOV B, 0                          ; int i = 0
_comport_self_out_flush_clear:
    CMP B, 8                          ; while (i < 8)
    JZ _comport_self_out_flush_loop
    MOV [X], 0                        ;     *str = '\0'
    INC X                             ;      str++
    INC B                             ;      i++
    JMP _comport_self_out_flush_clear
_comport_self_out_flush_return:
    MOV [_comport_self_out_length], 0 ; clear the length of the comport_self_out buffer
    MOV SP, BP
    POP BP
    POP X
    POP B
    POP A
    RET

;; void _comport_self_out_write(const char * str)
;; write a null terminated string to the comport buffer
;; if the buffer is full call _sleep to flush the buffer and wait till the new tick clears the hardware
_comport_self_out_write:
    PUSH A
    PUSH B
    PUSH BP
    MOV BP, SP
    ;; [BP] - old SP
    ;; [BP + 1] - ret
    ;; [BP + 2] - B
    ;; [BP + 3] - A
    ;; [BP + 4] - const char * str
    MOV A, [BP + 4]
    MOV B, _comport_self_out_buffer
    ADD B, [_comport_self_out_length]
_comport_self_out_write_loop:
    CMP [_comport_self_out_length], 40 ;; if the buffer is full flush and sleep till next tick
    JL _comport_self_out_write_writing
    CALL _comport_self_out_flush       ;; _sleep implicitly calls flush if the buffer is not empty, but we'd rather spell it out explicit
    CALL _sleep
    MOV B, _comport_self_out_buffer
_comport_self_out_write_writing:
    CMP [A], 0                         ;; while (*str !== 0)
    JZ _comport_self_out_write_return
    MOV [B], [A]
    INC B
    INC A
    INC [_comport_self_out_length]
    JMP _comport_self_out_write_loop
_comport_self_out_write_return:
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET 1

;; virtual machine implementation
;; based on the vm implementation in 'std.c'
;; NOTE: so we do some math to get the amount of adresses between after the binary code instructions until the stack pointer
_STACK_START equ 0xffff ; stack pointer starts at mem[65535] goes towards mem[0]
; heap_start: dw 0 ; is a label generated at the end 
; _HEAP_START: DW 0 ;; is generated at the end
; SP ; should point to the top of the stack. without any pushes and/or pops it should be 2 ^ 16 - 1
;; struct machine {}
machine_memory: DW 0x0000 ; int * memory
machine_allocated: DW 0x0000 ; bool * allocated
machine_capacity: DW 0x0000 ; int capacity
machine_stack_ptr: DW 0x0000 ; int stack_ptr
machine_new: ; machine * machine_new ( int var, int capacity )
    ;; TODO: write an heap implementation that doesnt have a 100% memory overhead
    MOV A, _STACK_START
    SUB A, _HEAP_START ; memory open to use
    SUB A, 0x1000     ; keep 0x1000 open for the stack ;; TODO: make sure stack and heap dont colide
    SHR A, 1          ; divide it by 2
    MOV [machine_capacity], A           ;; so capacity is (STACK_START - _HEAP_START) / 2
    MOV [machine_memory], _HEAP_START    ;; machine->memory is a pointer to the _HEAP_START address
    MOV [machine_allocated], _HEAP_START ;; machine->allocated  is a pointer to the _HEAP_START address with an offset of (STACK_START - _HEAP_START) / 2
    ADD [machine_allocated], [machine_capacity]
    ;; compiler figures out maximum stack size and defines it as a constant
    ;; the c impl does a for loop with push(0) for this size, but the end result is the same as setting the stack ptr to this size
    MOV [machine_stack_ptr], [_machine_new_vars]
    RET

;; void machine_allocate()
;; pop size of the stack
machine_allocate:
    PUSH A
    PUSH B
    PUSH C
    PUSH D
    PUSH X
    PUSH Y
    PUSH BP
    MOV BP, SP
    CALL machine_pop           ; int size = machine_pop()
    MOV B, [machine_capacity]  ; int i = machine->capacity
    DEC B                      ; i -= 1
    MOV C, [machine_allocated] ; int * loc_allocated = machine->allocated
    MOV X, 0                   ; int consecutive_free_cells = 0
machine_allocate_loop_find:
    CMP B, [machine_stack_ptr] ; while (i > machine->stack_ptr)
    JLE machine_allocate_loop_break
    MOV D, C                   ; 
    ADD D, B                   ; int is_allocated = machine->allocated[i]
    CMP [D], 0                 ; if !is_allocated
    JNZ machine_allocate_loop_find_false
    INC X
    JMP machine_allocate_loop_find_true
machine_allocate_loop_find_false:
    MOV X, 0
machine_allocate_loop_find_true:
    CMP X, A                   ; if consecutive_free_cells == size
    JZ machine_allocate_loop_break
    DEC B
    JNZ machine_allocate_loop_find
machine_allocate_loop_break:
    MOV Y, B                   ; int addr = i
    CMP Y, [machine_stack_ptr] ; if addr <= vm->stack_ptr then panic
    JLE machine_allocate_loop_panic
    MOV B, 0                   ; i = 0
machine_allocate_loop_mark:
    CMP B, A                   ; while (i < size)
    JGE machine_allocate_ret
    MOV D, C                   ; int * loc = machine->allocated
    ADD D, B                   ; loc += i
    MOV [D], 1                 ; *loc = 1
    INC B
    JMP machine_allocate_loop_mark
machine_allocate_ret:
    PUSH Y
    CALL machine_push
    MOV SP, BP
    POP BP
    POP Y
    POP X
    POP D
    POP C
    POP B
    POP A
    RET
machine_allocate_loop_panic:
    PUSH NO_FREE_MEMORY
    CALL _panic

;; double machine_free()
machine_free:
    PUSH B
    PUSH C
    PUSH D
    PUSH X
    PUSH BP
    MOV BP, SP
    CALL machine_pop         ; int addr = machine_pop() // C
    MOV C, A
    CALL machine_pop         ; int size = machine_pop() // A
    MOV B, 0                 ; int i = 0                // B
machine_free_loop:
    CMP B, A
    JL machine_free_ret
    MOV D,   C                 ; int d = addr + i
    ADD D, B
    MOV X, [machine_allocated]
    ADD X, D
    MOV [X], 0                 ; machine->allocated[addr + i] = false
    MOV X, [machine_memory]
    ADD X, D
    MOV [X], 0                 ; machine->memory[addr + i] = 0
    INC B
    JMP machine_free_loop
machine_free_ret:
    MOV SP, BP
    POP BP
    POP X
    POP D
    POP C
    POP B
    RET

;; void machine_push(int n)
;; push n to the stack
machine_push:
    PUSH A
    PUSH BP
    MOV BP, SP
    ;; if machine->allocated[machine->stack_ptr] !== 0 then panic
    MOV A, [machine_allocated]
    ADD A, [machine_stack_ptr]
    CMP [A], 0
    JNZ machine_push_panic
    MOV A, [machine_memory]
    ADD A, [machine_stack_ptr] ; ref = &machine->memory[machine->stack_ptr]
    MOV [A], [BP + 3]          ; *ref = n
    INC [machine_stack_ptr]    ; machine->stack_ptr++
    MOV SP, BP
    POP BP
    POP A
    RET 1
machine_push_panic:
    PUSH STACK_HEAP_COLLISION
    CALL _panic

;; int machine_pop()
;; pop n of the stack
machine_pop:
    PUSH B
    PUSH BP
    MOV BP, SP
    CMP [machine_stack_ptr], 0
    JZ machine_pop_panic
    MOV A, [machine_memory]    ; int * loc = machine->memory
    ADD A, [machine_stack_ptr] ; loc += machine->stack_ptr
    DEC A                      ; loc -= 1
    MOV B, [A]                 ; int b = *loc
    MOV [A], 0                 ; *loc = 0 // imo no need to zero out memory after a pop, if the location is read it should be expected to be garbage data
    DEC [machine_stack_ptr]    ; machine->stack_ptr--
    MOV A, B                   ; return values are set in the A register
    MOV SP, BP
    POP BP
    POP B
    RET
machine_pop_panic:
    PUSH STACK_UNDERFLOW
    CALL _panic

;; void machine_store(int size)
;; pop address of the stack
;; i is size - 1
;; for i until size
;;    pop value off the stack
;;    write it to address + i
machine_store:
    PUSH A
    PUSH B
    PUSH C
    PUSH D
    PUSH BP
    MOV BP, SP
    CALL machine_pop        ; int * addr = machine_pop()
    ADD A, [machine_memory] ; addr += vm->memory
    MOV C, A                ; // move addr to a different register
    MOV B, [BP + 6]         ; int i = size
    DEC B                   ; i -= 1
machine_store_loop:
    CMP B, 0                ;   while (i >= 0)
    JL machine_store_ret
    CALL machine_pop        ;   int value = machine_pop()
    MOV D, C                ;   int * loc = addr
    ADD D, B                ;   loc += i
    MOV [D], A              ;   *loc = value
    DEC B                   ;   i--
    JMP machine_store_loop
machine_store_ret:
    MOV SP, BP
    POP BP
    POP D
    POP C
    POP B
    POP A
    RET 1

;; void machine_load(int size)
;; load size amount of integers from popped address
machine_load:
    PUSH A
    PUSH B
    PUSH C
    PUSH D
    PUSH BP
    MOV BP, SP
    CALL machine_pop        ; int * addr = machine_pop()
    ADD A, [machine_memory] ; addr += vm->memory
    MOV C, A                ; move addr to a different register
    MOV B, 0                ; int i = 0
machine_load_loop:
    CMP B, [BP + 6]         ; while (i < size)
    JGE machine_load_ret
    MOV D, C                ; int * loc = addr
    ADD D, B                ; loc += i
    PUSH [D]                ; int value = *loc
    CALL machine_push       ; machine_push(value)
    INC B                   ; i++
    JMP machine_load_loop
machine_load_ret:
    MOV SP, BP
    POP BP
    POP D
    POP C
    POP B
    POP A
    RET 1

;; void machine_add()
;; pop 2 values, add them and push the result
machine_add:
    PUSH A
    PUSH B
    PUSH BP
    MOV BP, SP
    CALL machine_pop
    MOV B, A
    CALL machine_pop
    ADD A, B
    PUSH A
    CALL machine_push
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; void machine_subtract()
;; pop 2 values, subtract them and push the result
machine_subtract:
    PUSH A
    PUSH B
    PUSH BP
    MOV BP, SP
    CALL machine_pop
    MOV B, A
    CALL machine_pop
    SUB A, B
    PUSH A
    CALL machine_push
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; void machine_sign()
;; pop a value of the stack, if it is 0 or greater push 1, else push -1
machine_sign:
    PUSH A
    PUSH B
    PUSH BP
    MOV BP, SP
    CALL machine_pop
    CMP A, 0
    JGE machine_sign_ge
machine_sign_l:
    PUSH -1
    JMP machine_sign_push
machine_sign_ge:
    PUSH 1
machine_sign_push:
    CALL machine_push
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; void machine_multiply()
;; pop 2 values, multiply them and push the result
machine_multiply:
    PUSH A
    PUSH B
    PUSH BP
    MOV BP, SP
    CALL machine_pop
    MOV B, A
    CALL machine_pop
    MUL B                 ; will multiply register A with operand, result is a 32-bit integer in Y:A
    PUSH A
    CALL machine_push
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; void machine_divide()
;; pop 2 values, divide them and push the result
machine_divide:
    PUSH A
    PUSH B
    PUSH BP
    MOV BP, SP
    MOV Y, 0
    CALL machine_pop
    MOV B, A
    CALL machine_pop
    DIV B                 ; will divide register Y:A with source, result in A, remainder in Y
    PUSH A
    CALL machine_push
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; std.ok defines a small std library, there are some foreign function calls inside that have to be defined
;; pop 2 values, compare and push the logical result
;; void lt!(x, y)
;; NOTE: first pop will retreive the first argument
lt:
    PUSH A
    PUSH X
    PUSH Y
    PUSH BP
    MOV BP, SP
    CALL machine_pop
    MOV X, A
    CALL machine_pop
    MOV Y, A
    CMP X, Y
    JL lt_true
lt_false:
    PUSH 0
    JMP lt_return
lt_true:
    PUSH 1
lt_return:
    CALL machine_push
    MOV SP, BP
    POP BP
    POP Y
    POP X
    POP A
    RET

;; void le!(x, y)
;; NOTE: first pop will retreive the first argument
le:
    PUSH A
    PUSH X
    PUSH Y
    PUSH BP
    MOV BP, SP
    CALL machine_pop
    MOV X, A
    CALL machine_pop
    MOV Y, A
    CMP X, Y
    JLE le_true
le_false:
    PUSH 0
    JMP le_return
le_true:
    PUSH 1
le_return:
    CALL machine_push
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; void gt!(x, y)
;; NOTE: first pop will retreive the first argument
gt:
    PUSH A
    PUSH X
    PUSH Y
    PUSH BP
    MOV BP, SP
    CALL machine_pop
    MOV X, A
    CALL machine_pop
    MOV Y, A
    CMP X, Y
    JG gt_true
gt_false:
    PUSH 0
    JMP gt_return
gt_true:
    PUSH 1
gt_return:
    CALL machine_push
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; void ge!(x, y)
;; NOTE: first pop will retreive the first argument
ge:
    PUSH A
    PUSH X
    PUSH Y
    PUSH BP
    MOV BP, SP
    CALL machine_pop
    MOV X, A
    CALL machine_pop
    MOV Y, A
    CMP X, Y
    JGE ge_true
ge_false:
    PUSH 0
    JMP ge_return
ge_true:
    PUSH 1
ge_return:
    CALL machine_push
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; pop a value and print it at a string
;; void prs!(s)
;; https://github.com/simon987/Much-Assembly-Required/wiki/(Hardware)-Universal-Com-Port
prs:
    PUSH A
    PUSH B
    PUSH BP
    MOV BP, SP
    MOV B, [machine_memory]     ; int * loc = machine->memory
    CALL machine_pop            ; int offset = machine_pop()
    ADD B, A                    ; loc += offset
    PUSH B
    CALL _comport_self_out_write
prs_break:
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; void prn!(n)
;; implementation from: https://stackoverflow.com/a/3982700
;; no negative numbers, no bound checks
prn:
    PUSH A
    PUSH B
    PUSH Y
    PUSH BP
    MOV BP, SP
    CALL machine_pop  ; pop value into
    MOV B, prn_buffer ; char * loc = &prn_buffer
    ADD B, 4          ; loc += 4 // move to the end of the buffer, but before the null terminator
prn_loop:
    CMP A, 10         ; while (value >= 10)
    JL prn_break
    MOV Y, 0         ; zero out Y for the DIV op
    DIV 10           ; divide by 10, result in A, remainder in Y
    ADD Y, 0x30      ; convert remainder to ascii character
    MOV [B], Y       ;
    DEC B
    JMP prn_loop
prn_break:
    ADD A, 0x30
    MOV [B], A
prn_loop_prc:
    PUSH B
    CALL _comport_self_out_write
prn_return:
    MOV SP, BP
    POP BP
    POP Y
    POP B
    POP A
    RET
prn_buffer: DW 6 DUP(0x00) ; space for 5 character + '\0'

;; void prc!(ch)
;; TODO: use smarter logic to use the full 40 word buffer instead of cheesing it with sleep
prc:
    PUSH A
    PUSH BP
    MOV BP, SP
    CALL machine_pop
    MOV [prc_buffer], A
    PUSH prc_buffer
    CALL _comport_self_out_write
    MOV SP, BP
    POP BP
    POP A
    RET
prc_buffer: DW 2 DUP(0x00) ;; snice the second word is never written to, this will always be a string with 1 character + null terminator

;; this function seems to be missing from std.ok, but is used in a few files
;; it prints a newline
;; void prend!()
prend:
    PUSH 10 ; '\n'
    CALL machine_push
    CALL prc
    RET

;; retrieve a character from stdin and push it on the stack
;; void getch!()
;; NOTE: seems like getch is expected to block so we emulate that behaviour
;; https://github.com/simon987/Much-Assembly-Required/wiki/(Hardware)-Keyboard
getch:
    PUSH A
    PUSH B
    PUSH BP
    MOV BP, SP
getch_fetch:
    MOV A, KEYBOARD_FETCH_KEY
    HWI HWID_KEYBOARD
    CMP B, 0   ; if the result is zero there was no character in the keyboard buffer
    JNZ getch_newline_check
    CALL _sleep ; to prevent spinning and draining the server / have the server terminate our execution we use sleep
    JMP getch_fetch
getch_newline_check:
    ;; NOTE: oakc examples ignore '\r' and work with '\n' characters, so we do a switcheroo
    CMP B, 13 ;; if key is a '\r' character, replace it with a '\n' character
    JNZ getch_return
    MOV B, 10
getch_return:
    PUSH B
    CALL machine_push
    MOV SP, BP
    POP BP
    POP B
    POP A
    RET

;; generated code starts here with a `main:` label
;; ...
;; generated code ends here with a `RET` instruction

;; after the generated code
; _HEAP_START: DW 0 ; label to where the heap should start