;;/
;; Implements the C header 'string.h' file in MAR assembly
;; Source: https://pubs.opengroup.org/onlinepubs/007908799/xsh/string.h.html
;;         http://www.cplusplus.com/reference/cstring/
;;/

__C_NULL equ 0x0000

;; void * memchr (const void * haystack, int needle, size_t length);
__c_memchr:
    ;; [SP + 1] = const void * haystack
    ;; [SP + 2] = int needle
    ;; [SP + 3] = size_t length
    mov a, [SP + 1]
__c_memchr_loop:
    cmp [SP + 3], 0
    jz __c_memchr_return_null
    cmp [a], [SP + 2]
    jz __c_memchr_return
    inc a
    dec [SP + 3]
    jmp __c_memchr_loop
__c_memchr_return_null:
    xor a, a
__c_memchr_return:
    ret 3

;; int memcmp(const void * lhs, const void * rhs, size_t length);
__c_memcmp:
    push b
    push c

    ;; [SP + 2] = return address
    ;; [SP + 3] = const void * lhs
    ;; [SP + 4] = const void * rhs
    ;; [SP + 5] = size_t length
    mov b, [SP + 3]
    mov c, [SP + 4]
    xor a, a
__c_memcmp_loop:
    cmp [SP + 5], 0
    jz __c_memcmp_return
    mov a, [c]
    sub a, [b]
    jnz __c_memcmp_return
    inc b
    inc c
    dec [SP + 5]
    jmp __c_memcmp_loop
__c_memcmp_return:
    pop c
    pop b
    ret 3

;; void * memcpy(void * destination, const void * source, size_t length);
__c_memcpy:
    push b
    ;; [SP + 1] = return value
    ;; [SP + 2] = void * destination
    ;; [SP + 3] = void * source
    ;; [SP + 4] = size_t length
    mov a, [SP + 2]
    mov b, [SP + 3]
__c_memcpy_loop:
    cmp [SP + 4], 0
    jz __c_memcpy_return
    mov [a], [b]
    inc a
    inc b
    dec [SP + 4]
    jmp __c_memcpy_loop
__c_memcpy_return:
    mov a, [SP + 2]
    pop b
    ret 3

;; void * memmove(void * destination, const void * source, size_t length);
__c_memmove:
    push b
    ;; [SP + 2] void * destination
    ;; [SP + 3] void * source
    ;; [SP + 4] size_t length
    mov a, [SP + 2]
    mov b, [SP + 3]
    cmp b, a
    jz __c_memmove_return
    jg __c_memmove_loop
    ;; if source < dest copy backwards
    add a, [SP + 4]
    add b, [SP + 4]
__c_memmove_loop:
    cmp [SP + 4], 0
    jz __c_memmove_return
    mov [a], [b]
    inc a
    inc b
    dec [SP + 4]
    jmp __c_memmove_loop
__c_memmove_loop_backwards:
    cmp [SP + 4], 0
    jz __c_memmove_return
    mov [a], [b]
    dec a
    dec b
    dec [SP + 4]
    jmp __c_memmove_loop_backwards
__c_memmove_return:
    mov a, [SP + 2]
    pop b
    ret 3

;; void * memset(void * destination, int value, size_t length);
__c_memset:
    ;; [SP + 1] void * destination
    ;; [SP + 2] int value
    ;; [SP + 3] size_t length
    mov a, [SP + 1]
__c_memset_loop:
    cmp [SP + 3], 0
    jz __c_memset_return
    mov [a], [SP + 2]
    inc a
    dec [SP + 3]
    jmp __c_memset_loop
__c_memset_return:
    mov a, [SP + 1]
    ret 3

;; char * strcat(char * destination, const char * source);
__c_strcat:
    push b
    mov a, [SP + 2]
    mov b, [SP + 3]
__c_strcat_loop_to_end_of_destination:
    cmp [a], 0
    jz __c_strcat_loop
    inc a
    jmp __c_strcat_loop_to_end_of_destination
__c_strcat_loop:
    cmp [b], 0
    jz __c_strcat_return
    mov [a], [b]
    inc a
    inc b
    jmp __c_strcat_loop
__c_strcat_return:
    mov [a], 0
    mov a, [SP + 2]
    pop b
    ret 2

;; char * strchr(const char * haystack, int needle);
__c_strchr:
    ;; [SP + 1] = const void * haystack
    ;; [SP + 2] = int needle
    mov a, [SP + 1]
__c_strchr_loop:
    cmp [a], 0
    jz __c_strchr_return_null
    cmp [a], [SP + 2]
    jz __c_strchr_return
    inc a
    jmp __c_strchr_loop
__c_strchr_return_null:
    xor a, a
__c_strchr_return:
    ret 2

;; int strcmp(const char * lhs, const char * rhs);
__c_strcmp:
    push b
    push c
    ;; [SP + 2] = return address
    ;; [SP + 3] = const void * lhs
    ;; [SP + 4] = const void * rhs
    mov b, [SP + 3]
    mov c, [SP + 4]
    xor a, a
__c_strcmp_loop:
    cmp [b], 0
    jz __c_strcmp_return
    cmp [c], 0
    jz __c_strcmp_return
    mov a, [c]
    sub a, [b]
    jnz __c_strcmp_return
    inc b
    inc c
    dec [SP + 5]
    jmp __c_strcmp_loop
__c_strcmp_return:
    pop c
    pop b
    ret 2

;; char * strcpy(char * destination, const char * source);
__c_strcpy:
    mov a, __C_NULL
    ret 2

;; size_t strcspn(const char *, const char *);
__c_strcspn:
    mov a, __C_NULL
    ret 2

;; char * strerror(int);
__c_strerror:
    mov a, __C_NULL
    ret 1

;; size_t __c_strlen(const char * str);
__c_strlen:
    push bp
    mov bp, sp
    ;; [BP + 0] = old BP
    ;; [BP + 1] = return address
    ;; [BP + 2] = const char * str
    mov a, [bp + 2]
__c_strlen_loop:
    cmp [a], 0
    jz __c_strlen_return
    inc a
    jmp __c_strlen_loop
__c_strlen_return:
    sub a, [bp + 2]
    mov sp, bp
    pop bp
    ret 1

;; char * strncat(char *, const char *, size_t);
__c_strncat:
    mov a, __C_NULL
    ret 3

;; int strncmp(const char *, const char *, size_t);
__c_strncmp:
    mov a, __C_NULL
    ret 3

;; char * strncpy(char *, const char *, size_t);
__c_strncpy:
    mov a, __C_NULL
    ret 3

;; char * strpbrk(const char *, const char *);
__c_strpbrk:
    mov a, __C_NULL
    ret 2

;; char * strrchr(const char *, int);
__c_strrchr:
    mov a, __C_NULL
    ret 2

;; size_t strspn(const char *, const char *);
__c_strspn:
    mov a, __C_NULL
    ret 2

;; char * strstr(const char *, const char *);
__c_strstr:
    mov a, __C_NULL
    ret 2

;; char * strtok(char *, const char *);
__c_strtok:
    mov a, __C_NULL
    ret 2
